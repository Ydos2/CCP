%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    // ME ////////////////////////////////
    #include <iostream>
    using namespace std;

    extern int yyparse();
    extern FILE *yyin;
    extern int line_num;
    //////////////////////////////////////

    int yylex(void);
    void yyerror(const char *);
%}

%union {
  int ival;
  float fval;
  char *sval;
}

// define the constant-string tokens:
%token PROCEDURE VAR INTERGER RETURN
%token END ENDL

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token <ival> INT
%token <fval> FLOAT
%token <sval> STRING

/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%%
// the first rule defined is the highest-level rule, which in our
// case is just the concept of a whole "csimple file":
start:
    header {
        cout << "done with a precedure file!" << endl;
    }
    ;
// CHANGE interger to all other types
header:
    PROCEDURE STRING '(' func_param ')' RETURN INTERGER '{' func_body '}' {
        cout << "reading a procedure function" << endl;
    }
    ;
func_param:
    STRING {
        cout << "Param -> " << $1 << endl;
    }
    ;
func_body: expression { printf("STO\n"); }
    |
    ;
expression: operand {
        cout << "." << endl;
    }
    | expression '+' operand  {
        cout << "+" << endl;
    }
    | expression '=' operand  {
        cout << "=" << endl;
    }
    | expression ';' operand {
        cout << ";" << endl;
    }
    | expression ';'  {
        cout << ";" << endl;
    }
    ;
operand : STRING  
    | INT
    | FLOAT
    ;
%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(1);
}
