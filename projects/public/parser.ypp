%{
    #include <stdio.h>
    #include <stdlib.h>
    #define YYDEBUG 1

    // ME ////////////////////////////////
    #include <iostream>
    using namespace std;

    extern int yyparse();
    extern FILE *yyin;
    extern int line_num;
    //////////////////////////////////////

    int yylex(void);
    void yyerror(const char *);
%}

%union {
  bool bval;
  int ival;
  char cval;
  char *sval;
  char *wval;
}

// define the constant-string tokens:
%token PROCEDURE VAR RETURN IF ELSE WHILE _NULL_
%token INTPTR CHARPTR AND EQUAL EQUALMORE EQUALLESS DIFF OR

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token <bval> BOOLEAN
%token <ival> INTEGER
%token <cval> CHAR
%token <sval> STRING
%token <wval> WORD

/* Enables verbose error messages */
/* %error-verbose WITHOUT WARNING */
%define parse.error verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%%
// the first rule defined is the highest-level rule, which in our
// case is just the concept of a whole "csimple file":
start:
    header_list {
        cout << "done with a precedure file!" << endl;
    }
    ;
// CHANGE interger to all other types

header_list: header_list header
    | header
    ;
header:
    header PROCEDURE WORD '(' func_param ')' RETURN types '{' func_body '}'
    | PROCEDURE WORD '(' func_param ')' RETURN types '{' func_body '}'
    | PROCEDURE WORD '(' ')' RETURN types '{' func_body '}'
    | PROCEDURE WORD '(' func_param ')' RETURN types '{' func_body '}' header
    ;

func_param:
    { cout << "Param N/A" << endl; }
    | list_func_param ':' types { cout << "Param Decla -> BON" << endl; }
    | func_param ';' list_func_param ':' types { cout << "Param Decla -> Multiple" << endl;}
    ;

list_func_param:
    list_func_param ',' WORD
    | WORD
    ;

func_body: checks_header get_var checks_list RETURN expression ';' {  }
    |
    ;

checks_list:
    | checks_list checks
    ;
checks_header:
    | checks_header header
    ;

checks: get_var
    | expression_check '=' expression ';'
    | expression_check '=' types ';'
    | expression_check '=' types '(' expression_list ')' ';'
    | types '(' ')' ';'
    | types '(' expression_list ')' ';'
    | keywords
    | paranthesis
    ;

expression_list: expression
    | expression_list ',' expression
expression:
    | '-' expression
    | '^' expression
    | '!' expression
    | '&' expression_check
    | expression operator expression
    | paranthesis
    | types '[' expression ']'
    | types
    | _NULL_
    ;

expression_check: types
    | types '[' expression ']'
    | '^' types
    ;

get_var:
    | get_var VAR list_func_param ':' types ';'
    {
        cout << "Var declaration" << endl;
    }
    | get_var VAR list_func_param ':' STRING '[' INTEGER ']' ';'
    {
        cout << "Var STRING[INTEGER]" << endl;
    }
    ;

keywords : IF '(' expression ')' '{' checks '}'
    | IF '(' expression ')' '{' checks '}' ELSE '{' checks '}'
    | WHILE '(' expression ')' '{' checks '}'
    ;

types : STRING
    | INTEGER
    | BOOLEAN
    | CHAR
    | INTPTR
    | CHARPTR
    | WORD
    ;

operator : AND
    | '/'
    | '='
    | EQUAL
    | '>'
    | EQUALMORE
    | '<'
    | EQUALLESS
    | DIFF
    | OR
    | '-'
    | '+'
    | '*'
    ;

paranthesis : '{' checks_list '}'
    | '|' expression '|'
    | '[' expression ']'
    | '(' expression ')'
    | '{' '}'
    ;
%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(1);
}
